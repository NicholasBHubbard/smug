#+TITLE:Literate Programming using SMUG
#+BIND: org-src-fontify-natively t
* Org Literate

The literate programming source files currently use org-mode as the
default syntax.

Emacs supports this using org-babel, and where possible we use the
same thing. 

** The Source Blocks 

The source blocks are parsed as part of [[file:~/me/src/smug/parser/org-syntax.org::#Blocks][Org Blocks]].

As this is the first source-block in this file, we can see it via this:

#+BEGIN_SRC lisp :tangle "/tmp/first-org-source-block.lisp" :padline no
  (first (smug/literate/tangle:source-blocks 
          (merge-pathnames #P"quicklisp/local-projects/smug/literate/literate.org"
                           (user-homedir-pathname))))
#+END_SRC

That returns the following:

#+BEGIN_SRC lisp
  #<SMUG/PARSER/ORG::SOURCE-BLOCK 
      SMUG/PARSER/ORG::WHITESPACE-PREFIX: NIL
      SMUG/PARSER/ORG::WHITESPACE-POSTFIX: SMUG/PARSER/ORG::|#<unbound>|
      SMUG/PARSER/ORG::KEYWORDS: NIL
      SMUG/PARSER/ORG::NAME: "SRC"
      SMUG/PARSER/ORG::PARAMETERS: "lisp :tangle \"/tmp/first-org-source-block.lisp\""
      SMUG/PARSER/ORG::CONTENTS: ("  (first (smug/literate/tangle:source-blocks "
                                  "          (merge-pathnames #P\"quicklisp/local-projects/smug/literate/literate.org\""
                                  "                           (user-homedir-pathname))))")
      SMUG/PARSER/ORG::LANGUAGE: "lisp"
      SMUG/PARSER/ORG::SWITCHES: NIL
      SMUG/PARSER/ORG::ARGUMENTS: ":tangle \"/tmp/first-org-source-block.lisp\"">
#+END_SRC

*** Header Arguments
**** padline :: control padded lines around blocks

#+BEGIN_QUOTE
Control in insertion of padding lines around code block bodies in
tangled code files.  The default value is `yes' which results in
insertion of newlines before and after each tangled code block.  The
following arguments are accepted.

   * `yes' Insert newlines before and after each code block body in
     tangled code files.

   * `no' Do not insert any newline padding in tangled output.

-- [[info:org#padline]]
#+END_QUOTE

*** syntax highlighting
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC

* Tangle :: take the source of source and tangle it into source code


#+BEGIN_QUOTE
Creating pure source code files by extracting code from source blocks is
referred to as "tangling"--a term adopted from the literate programming
community.  During "tangling" of code blocks their bodies are expanded
using `org-babel-expand-src-block' which can expand both variable and
"noweb" style references  (see *note Noweb reference syntax::).

Header arguments
................

`:tangle no'
     The default.  The code block is not included in the tangled output.

`:tangle yes'
     Include the code block in the tangled output.  The output file
     name is the name of the org file with the extension `.org'
     replaced by the extension for the block language.

`:tangle filename'
     Include the code block in the tangled output to file `filename'.

-- [[info:org#Extracting%20source%20code][info:org#Extracting source code]]
#+END_QUOTE

** To a file

In the example of [[*The%20Source%20Blocks][The Source Blocks]], we can see that code block is tangled to a file.

#+BEGIN_SRC org
  ,#+BEGIN_SRC lisp :tangle "/tmp/first-org-source-block.lisp" :padline no
    (first (smug/literate/tangle:source-blocks 
             (merge-pathnames #P"quicklisp/local-projects/smug/literate/literate.org"
                              (user-homedir-pathname))))
  ,#+END_SRC
#+END_SRC

So, when this file is tangled, the =#P\"/tmp/first-org-source-block.lisp\"\=
#+NAME: tangle-this-file
#+BEGIN_SRC lisp
  (smug/literate/tangle:tangle-file 
   (merge-pathnames #P"quicklisp/local-projects/smug/literate/literate.org"
                    (user-homedir-pathname)))
#+END_SRC

#+BEGIN_SRC sh :results output
cat /tmp/first-org-source-block.lisp
#+END_SRC

#+RESULTS:
: (first (smug/literate/tangle:source-blocks 
:         (merge-pathnames #P"quicklisp/local-projects/smug/literate/literate.org"
:                          (user-homedir-pathname))))


* Noweb :: reference named blocks of code

#+BEGIN_QUOTE
The "noweb" (see `http://www.cs.tufts.edu/~nr/noweb/') Literate
Programming system allows named blocks of code to be referenced by
using the familiar Noweb syntax:

     <<code-block-name>>

-- [[info:org#Noweb%20reference%20syntax][info:org#Noweb reference syntax]]
#+END_QUOTE

In this file, we have a code block with a name.

#+BEGIN_SRC org
  ,#+NAME: tangle-this-file
  ,#+BEGIN_SRC lisp
    (smug/literate/tangle:tangle-file 
     (merge-pathnames #P"quicklisp/local-projects/smug/literate/literate.org"
                      (user-homedir-pathname)))          
  ,#+END_SRC  
#+END_SRC

If we make another code block with the header argument =:noweb yes=,
we can merge other code blocks inside it.

#+BEGIN_SRC lisp :tangle "/tmp/tangle-this-file.lisp" :noweb yes :padline no
  ;;;; This is a file, a .lisp file, with some comments In reality it is
  ;;;; to test the noweb reference So, here we reference a code block :

  ;;;; <<tangle-this-file>> this is the end
  
  ;;;; This is also the codeblock, but this time a reference without the
  ;;;; starting ";;;;"
  
  <<tangle-this-file>> ;; my only friend, the end
#+END_SRC
















* Test test test

#+name: foo
#+include: diff.lisp src lisp

#+BEGIN_SRC sh :tangle /tmp/foo :noweb yes
huh?
<<foo>>
bar!
#+END_SRC
