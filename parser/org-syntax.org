#+TITLE: SMUG Org Syntax
#+AUTHOR: Drew Crampsie, Nicolas Goaziou
#+OPTIONS: toc:t ':t author:nil
#+LANGUAGE: en
#+BIND: sentence-end-double-space t

This document describes and comments Org syntax as it is currently
read by the SMUG parser. 

It is very close to (Org Elements) and, therefore, the export
framework.  It also includes a few comments on that syntax.

#+BEGIN_SRC emacs-lisp 
  (setf *org-babel-use-quick-and-dirty-noweb-expansion* t)
#+END_SRC

* Syntax 

Unless specified otherwise, case is not significant.

#+name: syntax 
#+BEGIN_SRC lisp
  (defclass syntax () ())  
#+END_SRC

** Document 
#+name: document 
#+BEGIN_SRC lisp :tangle org/document.lisp :noweb yes
  (defpackage :smug/parser/org/document 
    (:use :cl :smug/parser/org/dot 
          :smug/parser/org/util
          :smug/parser/org/syntax)
    (:import-from :smug/parser/org/section
                  #:.section)
    (:import-from :smug/file)
    (:import-from :smug/parser/org/outline
                  #:.outline
                  #:outline-headline
                  #:outline-sub-outlines)
    (:import-from :smug/parser/org/headline 
                  #:headline-title
                  #:headline-stars
                  #:headline-level)
    (:import-from :smug/parser/org/keyword
                  #:.keyword #:keywords
                  #:get-keyword
                  #:keyword-value)
    (:export #:document
             #:read-document
             #:.document
             #:document-section
             #:document-outlines
             #:document-title
             #:find-outline))
  (in-package :smug/parser/org/document)
  
  (defclass document (keywords syntax)
    ((section :accessor document-section
              :initarg :section)
     (outlines :accessor document-outlines
               :initarg :outlines)
     (pathname :accessor document-pathname 
               :initarg :pathname
               :initform nil)))
  
  (defun document-title (document)
    (or 
     (ignore-errors (keyword-value (get-keyword "TITLE" document)))
     (first (document-section document))
     (document-pathname document)))
  
  (defun .document (&key (section (.section)))
    (.make-instance 
     'document 
     :keywords (.some (.keyword))
     :section (.section)
     :outlines (.some (smug/parser/org/outline:.outline))))
  
  (defun find-outline (headline document)
    (block outline 
      (labels 
          ((findo (outlines)
             (find headline outlines
                   :test 
                   (lambda (headline outline) 
                     (or (when (string= headline 
                                        (headline-title (outline-headline outline)))
                           (return-from outline outline))
                         (findo (outline-sub-outlines outline)))))))
        (findo (document-outlines document)))))
                                    
  
  (defun read-document (source &key (pathname))
    (let* ((source-string (etypecase source
                            (pathname (smug/file:read-file-into-string source))
                            (t source))))
      (multiple-value-bind (document leftover others)
          (.run (.document) source-string)
        (multiple-value-prog1 (values document leftover others)
          (when (or pathname (pathnamep source))
            (setf (document-pathname document) source))))))
    
    
#+END_SRC

** Environments

Three categories are used to classify the environments: "Greater
elements", "elements", and "objects", from the broadest scope to the
narrowest.  The word "element" is used for both Greater and non-Greater
elements, the context should make that clear.

#+name: environment
#+BEGIN_SRC lisp :tangle org/environment.lisp
  (defpackage :smug/parser/org/environment
    (:use :cl  
          :smug/parser/org/util
          :smug/parser/org/syntax)
    (:export #:environment))
  (in-package :smug/parser/org/environment)
  
  (defclass environment (whitespace syntax) 
    ((start-input :accessor environment-start-input 
            :initarg :start-input)
     (end-input :accessor environment-end-input)))
#+END_SRC

The paragraph is the unit of measurement.  An element defines
syntactical parts that are at the same level as a paragraph,
i.e. which cannot contain or be included in a paragraph.  An object is
a part that could be included in an element.  Greater elements are all
parts that can contain an element.

Empty lines belong to the largest element ending before them.  For
example, in a list, empty lines between items belong are part of the
item before them, but empty lines at the end of a list belong to the
plain list element.

Unless specified otherwise, case is not significant.

** .string-of

#+NAME: .string-of 
#+BEGIN_SRC lisp
  (defun .string-of (parser &key (using '.some))
    (.coerce (funcall using parser) 'cl:string))  
#+END_SRC

** Whitespace and Lines 

#+NAME: .whitespace
#+BEGIN_SRC lisp
  (defvar *whitespace* '(#\Space #\Tab)) 

  (defun .whitespace ()
    (.is 'member *whitespace*))
  
  (defclass whitespace (syntax)
    ((whitespace-prefix :initarg :whitespace-prefix
          :accessor whitespace-prefix)
     (whitespace-postfix :initarg :whitespace-postfix
           :accessor whitespace-postfix)))
#+END_SRC


#+NAME: .line
#+BEGIN_SRC lisp
(defun .line (&optional (nl #\Newline))
  (.prog1 (.coerce (.some (.is-not #'char= nl)) 
		   'cl:string)
	  (.is #'char= nl)))
#+END_SRC

** Until 
#+NAME: .until
#+BEGIN_SRC lisp
  (defstruct until 
    contents end)
  
  (defun .until (parser &key (do (.item)) contents)
    (.let* ((until (.or parser (.result nil))))
      (if until 
          (.result (cons (reverse contents)
                         until))
          (.let* ((first do))
            (.until parser :do do :contents (list* first contents))))))  
#+END_SRC

** Syntax package/file

#+HEADER: :padline no
#+BEGIN_SRC lisp :tangle org/syntax.lisp :noweb tangle
  (defpackage :smug/parser/org/syntax
    (:use :cl 
          :smug/parser/org/dot)
    (:export #:syntax
             #:whitespace
             #:.whitespace
             #:*whitespace*
             #:.line
             #:.until
             #:.string-of))
  (in-package :smug/parser/org/syntax)
  
  <<syntax>>
  
  (defmethod print-object ((object syntax) stream)
    (print-unreadable-object (object stream :type t)
      (let* ((class (class-of object))
             (block (c2mop:class-slots class)))
        (pprint-logical-block (stream block)
          (loop 
             (let ((slotd (pprint-pop)))
               (pprint-indent :block 1)
               (princ (c2mop:slot-definition-name slotd) stream)
               (write-char #\Space stream)
               (format stream "~S" (handler-case 
                           (c2mop:slot-value-using-class class object slotd)
                                     (unbound-slot ()
                           "#<unbound>"))))
             (write-char #\Space stream) 
             (pprint-exit-if-list-exhausted)
             (pprint-newline :mandatory stream))))))
    
  <<.whitespace>>  
  
  <<.line>>
  
  <<.until>>

  <<.string-of>>
#+END_SRC

* Outline 

It starts with [[info:emacs#Outline%20Format][outlines]], which in this case are made up of headlines
and sections. A core concept in this syntax is that only headlines
and sections are context-free[fn:1][fn:2].  Every other syntactical
part only exists within specific environments.

An outline contains directly one headline, one section (optionally),
followed by any number of deeper level outlines.

#+name: outline
#+BEGIN_SRC lisp
  (defclass outline (syntax) 
    ((headline :accessor outline-headline
               :initarg :headline)
     (section :accessor outline-section
              :initarg :section)
     (sub-outlines :accessor outline-sub-outlines)
     (start-input :accessor outline-start-input 
            :initarg :start-input)
     (end-input :accessor outline-end-input)))
  
    
  (defun .same-level-or-less-headline (headline)
    (.let* ((new-headline (.headline)))
      (.guard #'identity 
              (<= (headline-level new-headline)
                  (headline-level headline)))))
      
  (defun .outline (&key 
                     (headline (.headline))
                     (section (.optional (.section))))
    
    (.let* ((outline 
             (.make-instance 'outline
                             :start-input (.input)
                             :headline headline
                             :section section))
            (subs (.some
                   (.progn (.not (.same-level-or-less-headline
                                  (outline-headline outline)))
                           (.outline))))
            (end (.input)))
      (prog1 (.result outline)
        (setf (outline-sub-outlines outline) subs
              (outline-end-input outline) end))))
#+END_SRC
** Outline package/file
#+HEADER: :padline no
#+BEGIN_SRC lisp :tangle org/outline.lisp :noweb tangle
  (defpackage :smug/parser/org/outline 
    (:use :cl
          :smug/parser/org/dot 
          :smug/parser/org/util
          :smug/parser/org/syntax)
    (:import-from :smug/parser/org/headline 
                  #:.headline
                  #:headline-stars
                  #:headline-level)
    (:import-from :smug/parser/org/section
                  #:.section)
    (:export #:outline
             #:outline-headline
             #:outline-section
             #:outline-start-input
             #:outline-end-input
             #:outline-sub-outlines
             #:.outline))
  (in-package :smug/parser/org/outline)
  
  <<outline>>
  
#+END_SRC

** Headline 
  A headline is defined as:
  
  #+BEGIN_EXAMPLE
  STARS KEYWORD PRIORITY TITLE TAGS
  #+END_EXAMPLE

#+name: headline
#+begin_src lisp
  (defstruct headline 
    stars keyword priority title tags)
  
  (defun headline-level (headline)
    (length (headline-stars headline)))
  
  (defun .headline ()
    (.prog1 
     (.make 
      'make-headline
      :stars (.stars)
      :keyword (.optional (.keyword))
      :priority (.optional (.priority))
      :title (.optional (.title))
      :tags (.optional (.tags)))
     (.some (.is 'char= #\Space))
       (.or  (.not (.item))
             (.is 'char= #\Newline))))
#+end_src 
  
*** STARS

    STARS is a string starting at column 0, containing at least one
    asterisk (and up to ~org-inlinetask-min-level~ if =org-inlinetask=
    library is loaded) and ended by a space character.  The number of
    asterisks is used to define the level of the headline.  It's the
    sole compulsory part of a headline.

   #+name: .stars
   #+begin_src lisp
     (defun .stars ()
       (.prog1 
	(.every (.is 'char= #\*))
	(.is 'char= #\Space)))
   #+end_src

*** KEYWORDS
    
      KEYWORD is a TODO keyword, which has to belong to the list defined in
      ~org-todo-keywords-1~.  Case is significant.

   #+name: todo-keyword
   #+begin_src lisp 
     (defun .keyword () 
       (.prog1 
	(apply #'.or (mapcar #'.string= (org-parameter 'org-todo-keywords-1)))
	(.is #'char= #\Space)))
   #+end_src
   
   #+name: parameters-org-todo-keywords-1
   #+begin_src lisp 
     (define-org-parameter 
       org-todo-keywords-1 
      '("TODO"
	"STARTED"
	"DONE")
      "The Org TODO Keywords")
   #+end_src
      
*** PRIORITY
   PRIORITY is a priority cookie, i.e. a single letter preceded by
   a hash sign # and enclosed within square brackets.

   #+name: .priority
   #+begin_src lisp
     (defun .priority ()
       (.prog2
	(.string= "[#")
	(.is 'alpha-char-p)
	(.string= "] ")))
   #+end_src

*** TITLE  
   TITLE can be made of any character but a new line.  Though, it will
   match after every other part have been matched.
   
   #+name: .title
   #+begin_src lisp 
     (defun .title ()
       (.coerce (.every 
		 (.progn (.not (.tags)) 
			 (.is-not 'char= #\Newline)))
		'cl:string))
   #+end_src

*** TAGS 
    
    TAGS is made of words containing any alpha-numeric character,
    underscore, at sign, hash sign or percent sign, and separated with
    colons.
   
   #+name: .tags
   #+begin_src lisp 
     (defun .tag () 
       (.progn (.is 'char= #\:)
	       (.coerce 
		(.every 
		 (.or (.is 'alphanumericp)
		      (.is 'member '(#\_ #\@ #\# #\%))))
		'cl:string)))
     
     (defun .tags ()
       (.prog1 (.every (.tag))
	       (.is 'char= #\:)))                 
   #+end_src

*** Valid Headlines
   Examples of valid headlines include:

   #+name: TEST-STRING:headline 
   #+BEGIN_SRC org
     ,* 
     
     ,** DONE
     
     ,*** Some e-mail
     
     ,**** TODO [#A] COMMENT Title :tag:a2%: 
   #+END_SRC

*** comments and quotes
     
   If the first word appearing in the title is ~org-comment-string~,
   the headline will be considered as "commented".  If that first word
   is ~org-quote-string~, it will be considered as "quoted".  In both
   situations, case is significant.

   #+name: parameters: org-comment-string
   #+begin_src lisp 
     (make-org-parameter 
      'org-comment-string
      "COMMENT"
      "If the first word appearing in the title is ~org-comment-string~, 
     the headline will be considered as \"commented\"")

   #+end_src

   #+name: parameters: org-quote-string
   #+begin_src lisp 
     (make-org-parameter 
      'org-quote-string 
      "QUOTE"
      "If that first word is ~org-quote-string~, it will be considered as
      \"quoted\"")
   #+end_src

   #+name: org-headline-QUOTE/COMMENT
   #+begin_src lisp
     (flet ((%P (param headline)
	      (.run (.string= (org-parameter param)) 
		    (headline-title headline))))
       
       (defun headline-commented-p (headline) 
	 (%P 'org-comment-string headline))
     
       (defun headline-quoted-p (headline) 
	 (%P 'org-quote-string headline)))
   #+end_src
   
*** footnote-section
   If its title is ~org-footnote-section~, it will be considered as
   a "footnote section".  Case is significant.

   #+name: parameters: org-footnote-section
   #+begin_src lisp 
     (make-org-parameter 
      'org-footnote-section 
      "Footnotes"
      "If its title is ~org-footnote-section~, it will be considered as
   a \"footnote section\"")
   #+end_src

*** archive-tag
   If ~org-archive-tag~ is one of its tags, it will be considered as
   "archived".  Case is significant.

   #+name: parameters: org-archive-tag
   #+begin_src lisp 
     (make-org-parameter 
      'org-archive-tag 
      "ARCHIVE"
      "If ~org-archive-tag~ is one of its tags, it will be considered as
   \"archived\"")
   #+end_src

*** The headline file 

#+HEADER: :padline no
#+BEGIN_SRC lisp :tangle org/headline.lisp :noweb tangle
  (defpackage :smug/parser/org/headline
    (:use :cl 
          :smug/parser/org/dot
          :smug/parser/org/util
          :smug/parser/org/parameters)
    (:export #:.headline
             #:headline
             #:headline-stars
             #:headline-title))
  (in-package :smug/parser/org/headline)
  
  <<headline>>
  
  <<.stars>>
  
  <<todo-keyword>>
  <<.priority>>
  
  <<.title>>
  <<.tags>>
  
  
  <<parameters-org-todo-keywords-1>>
  
#+END_SRC

** Sections 

   A section contains directly any greater element or element.  Only
   a headline can contain a section.  As an exception, text before the
   first headline in the document also belongs to a section.

#+BEGIN_SRC lisp :tangle org/section.lisp
  (defpackage :smug/parser/org/section
    (:use :cl
          :smug/parser/org/dot 
          :smug/parser/org/util
          :smug/parser/org/syntax)
    (:import-from :smug/parser/org/headline 
                  #:.headline)
    (:import-from :smug/parser/org/block 
                            #:.block
                            #:block-name)
    (:export #:section
             #:.section))
  (in-package :smug/parser/org/section)
  
  (defclass section (syntax) 
    ((contents :accessor section-contents 
               :initarg :contents)))
  
  (defun .section-content ()
    (.progn (.not (.headline))
            (.or (.block) (.line))))
  
  (defun find-block (section &key type name number)
    (etypecase section 
      (list (let* ((blocks (remove-if-not (lambda (thing)
                                            (typep thing 'smug/parser/org/block:block))
                                          section))
                   (numbered (when number (nth (1- number) blocks))))
              numbered)
            )))
              
         
  (defun .section 
      (&key 
         (content (.section-content)))
    (.every content))
#+END_SRC

*** Quoted
  If a quoted headline contains a section, the latter will be
  considered as a "quote section".

**
  As an example, consider the following document:

  #+BEGIN_SRC org
  An introduction.
  
  ,* A Headline 
  
    Some text.
  
  ,** Sub-Topic 1
  
  ,** Sub-Topic 2
  
  ,*** Additional entry 
  
  ,** QUOTE Another Sub-Topic
  
     Some other text.
  #+END_SRC

  Its internal structure could be summarized as:

  #+BEGIN_EXAMPLE
  (document
   (section)
   (headline
    (section)
    (headline)
    (headline
     (headline))
    (headline
     (quote-section))))
  #+END_EXAMPLE

* Affiliated Keywords
  :PROPERTIES:
  :CUSTOM_ID: Affiliated_keywords
  :END:

  With the exception of [[#Inlinetasks][inlinetasks]], [[#Plain_Lists_and_Items][items]], [[#Clock,_Diary_Sexp_and_Planning][planning]], [[#Clock,_Diary_Sexp_and_Planning][clocks]], [[#Node_Properties][node
  properties]] and [[#Table_Rows][table rows]], every other element type can be assigned
  attributes.

  This is done by adding specific keywords, named "affiliated
  keywords", just above the element considered, no blank line
  allowed.


  #+name: keywords
  #+BEGIN_SRC lisp

    (defclass keywords ()
      ((keywords :initarg :keywords
                 :accessor keywords)))
    
    (defun get-keyword (key keywords)
      (let ((list (etypecase keywords
                    (list keywords)
                    (keywords (keywords keywords)))))
    
        (find key list
              :test 'string-equal 
              :key 'keyword-key)))
  #+END_SRC

  Affiliated keywords are built upon one of the following patterns:
  "#+KEY: VALUE", "#+KEY[OPTIONAL]: VALUE" or "#+ATTR_BACKEND: VALUE".

  #+NAME: keyword
  #+BEGIN_SRC lisp
    (defclass keyword (whitespace)
      ((key :initarg :key
             :accessor keyword-key)
       (value :initarg :value
              :accessor keyword-value)))
         
    (defun .keyword ()
      (.make-instance 
       'keyword
       :whitespace-prefix (.some (.whitespace))
       :key (.progn          
               (.string= "#+")
               (.coerce (.every (.is-not 'char= #\:))
                        'cl:string))
       :value (.progn 
               (.string= ": ")
               (.line))))         
  #+END_SRC
  
  KEY is either "CAPTION", "HEADER", "NAME", "PLOT" or "RESULTS"
  
  #+name: get-keyword-functions 
  #+BEGIN_SRC lisp 
    (defun name (environment)
      (get-keyword "name" environment))      
  #+END_SRC
  
  BACKEND is a string constituted of alpha-numeric characters, hyphens
  or underscores.

  OPTIONAL and VALUE can contain any character but a new line.  Only
  "CAPTION" and "RESULTS" keywords can have an optional value.

  An affiliated keyword can appear more than once if KEY is either
  "CAPTION" or "HEADER" or if its pattern is "#+ATTR_BACKEND: VALUE".

  "CAPTION", "AUTHOR", "DATE" and "TITLE" keywords can contain objects
  in their value and their optional value, if applicable.
  
*** The keyword file 

#+HEADER: :padline no
#+BEGIN_SRC lisp :tangle org/keyword.lisp :noweb tangle
  (defpackage :smug/parser/org/keyword
    (:use :cl 
          :smug/parser/org/dot
          :smug/parser/org/util
          :smug/parser/org/parameters
          :smug/parser/org/syntax)
    (:shadow #:keyword)
    (:export #:keyword 
             #:keywords
             ))
  (in-package :smug/parser/org/keyword)
  
  <<keywords>>

  <<get-keyword-functions>>

  <<keyword>>
  
  
#+END_SRC
  
* Greater Elements
  :PROPERTIES:
  :CUSTOM_ID: Greater_Elements
  :ID:       5762b879-10fc-47ac-b8a9-59007996d49b
  :END:
  
  Unless specified otherwise, greater elements can contain directly
  any other element or greater element excepted:

  - elements of their own type,
  - [[#Node_Properties][node properties]], which can only be found in [[#Drawers_and_Property_Drawers][property drawers]],
  - [[#Plain_Lists_and_Items][items]], which can only be found in [[#Plain_Lists_and_Items][plain lists]].
    
  #+NAME: greater-element
  #+BEGIN_SRC lisp
    (defclass greater-element (whitespace)
      ((keywords :initarg :keywords 
                 :accessor greater-element-keywords)))
    
    (defun .greater-element (.parser)
      (.let* ((keys (.some (.keyword))
              (pre (.some (.whitespace)))
              (element .parser))
        (setf (greater-element-keywords element) keys
              (whitespace-prefix element) pre)
        (.result element)))              
  #+END_SRC

** Greater Blocks
   :PROPERTIES:
   :CUSTOM_ID: Greater_Blocks
   :ID:       14d26d49-9e9b-42db-a9c9-d8e722bb3234
   :END:

   Greater blocks consist in the following pattern:

   #+BEGIN_EXAMPLE
   ,#+BEGIN_NAME PARAMETERS
   CONTENTS
   ,#+END_NAME
   #+END_EXAMPLE

   #+NAME: greater-block-class
   #+BEGIN_SRC lisp :noweb yes
     (defclass greater-block (greater-element)
       ((name :initarg :name
              :accessor greater-block-name)
        (parameters :initarg :parameters
              :accessor greater-block-parameters)
        (contents :initarg :contents
              :accessor greater-block-contents)))
     
   #+END_SRC

   NAME can contain any non-whitespace character.
   
   #+NAME: greater-block-name
   #+BEGIN_SRC lisp
   (defun .name () 
     (.every (.is-not 'member (cons #\Newline *whitespace*)))
   #+END_SRC

   PARAMETERS can contain any character other than new line, and can
   be omitted.

   #+NAME: greater-block-parameters
   #+BEGIN_SRC lisp
   (.progn (.whitespace) (.line))
   #+END_SRC

   If NAME is "CENTER", it will be a "center block".  If it is
   "QUOTE", it will be a "quote block".

   #+NAME: center/quote-block
   #+BEGIN_SRC lisp
     (defclass center-block (greater-block) ())
     
     (add-greater-block "CENTER" 'center-block)
       
     (defclass quote-block (greater-block) ())) 

     (add-greater-block "QUOTE" 'quote-block)
   #+END_SRC

   #+NAME: .greater-block
   #+BEGIN_SRC lisp :noweb :tangle
     (defun .greater-block ()
       (flet ((.end-block (name)
                (.progn (.some (.whitespace))
                        (.string-equal 
                         (concatenate 'string
`                                      "#+END_" name)))))
          
         (.let* ((keywords (.some (.keyword)))
	         (_ (.string-equal "#+BEGIN_"))
                 (name 
                  (.coerce 
                   <<greater-block-name>>
                   'cl:string))
                 (parameters
                  <<greater-block-parameters>>)
                 (contents (.until (.end-block name) 
                                   :do (.line))))
           (.result (make-greater-block-instance 
                     name
		     :keywords keywords
                     :name name
                     :parameters parameters
                     :contents (until-contents 
                                contents))))))
        
   #+END_SRC 

   #+NAME: greater-block-classes
   #+BEGIN_SRC lisp
     (defvar *greater-block-classes* (list))
     
     (defun greater-block-classes ()
       ,*greater-block-classes*)
     
     (defun (setf greater-block-classes) (value)
       (setf *greater-block-classes* value))
     
     (defun add-greater-block (name class)
       (push  (cons name class)
              (greater-block-classes)))
     
     (defun make-greater-block-instance (name &rest initargs)
       (apply #'make-instance 
         (destructuring-bind (_ . maker)
             (or (assoc name (greater-block-classes) 
			:test #'string-equal)
                 (assoc nil (greater-block-classes)))
	   (declare (ignore _))
           maker)            
         initargs))
     
     
     
     
   #+END_SRC

   If the block is neither a center block, a quote block or a [[#Blocks][block
   element]], it will be a "special block".

   #+NAME: special-block
   #+BEGIN_SRC lisp
     (defclass special-block (greater-block) ())
     (add-greater-block nil 'special-block)  
   #+END_SRC
      
   CONTENTS can contain any element, except : a line =#+END_NAME= on
   its own.  Also lines beginning with STARS must be quoted by
   a comma.
   
** Drawers and Property Drawers
   :PROPERTIES:
   :CUSTOM_ID: Drawers_and_Property_Drawers
   :END:

   Pattern for drawers is:

   #+BEGIN_EXAMPLE
   :NAME:
   CONTENTS
   :END:
   #+END_EXAMPLE

   NAME has to either be "PROPERTIES" or belong to ~org-drawers~ list.

   If NAME is "PROPERTIES", the drawer will become a "property
   drawer".

   In a property drawers, CONTENTS can only contain [[#Node_Properties][node property]]
   elements.  Otherwise it can contain any element but another drawer
   or property drawer.

   #+ATTR_ASCII: :width 5
   -----

   It would be nice if users hadn't to register drawers names before
   using them in ~org-drawers~ (or through the ~#+DRAWERS:~ keyword).
   Anything starting with ~^[ \t]*:\w+:[ \t]$~ and ending with
   ~^[ \t]*:END:[ \t]$~ could be considered as a drawer.  --- ngz

** Dynamic Blocks
   :PROPERTIES:
   :CUSTOM_ID: Dynamic_Blocks
   :END:

   Pattern for dynamic blocks is:

   #+BEGIN_EXAMPLE
   ,#+BEGIN: NAME PARAMETERS
   CONTENTS
   ,#+END:
   #+END_EXAMPLE

   NAME cannot contain any whitespace character.

   PARAMETERS can contain any character and can be omitted.

** Footnote Definitions
   :PROPERTIES:
   :CUSTOM_ID: Footnote_Definitions
   :END:

   Pattern for footnote definitions is:

   #+BEGIN_EXAMPLE
   [LABEL] CONTENTS
   #+END_EXAMPLE

   It must start at column 0.

   LABEL is either a number or follows the pattern "fn:WORD", where
   word can contain any word-constituent character, hyphens and
   underscore characters.

   CONTENTS can contain any element excepted another footnote
   definition.  It ends at the next footnote definition, the next
   headline, two consecutive empty lines or the end of buffer.

** Inlinetasks
   :PROPERTIES:
   :CUSTOM_ID: Inlinetasks
   :END:

   Inlinetasks are defined by ~org-inlinetask-min-level~ contiguous
   asterisk characters starting at column 0, followed by a whitespace
   character.

   Optionally, inlinetasks can be ended with a string constituted of
   ~org-inlinetask-min-level~ contiguous asterisk characters starting
   at column 0, followed by a space and the "END" string.

   Inlinetasks are recognized only after =org-inlinetask= library is
   loaded.

** Plain Lists and Items
   :PROPERTIES:
   :CUSTOM_ID: Plain_Lists_and_Items
   :END:

   Items are defined by a line starting with the following pattern:
   "BULLET COUNTER-SET CHECK-BOX TAG", in which only BULLET is
   mandatory.

   BULLET is either an asterisk, a hyphen, a plus sign character or
   follows either the pattern "COUNTER." or "COUNTER)".  In any case,
   BULLET is follwed by a whitespace character or line ending.

   COUNTER can be a number or a single letter.

   COUNTER-SET follows the pattern [@COUNTER].

   CHECK-BOX is either a single whitespace character, a "X" character
   or a hyphen, enclosed within square brackets.

   TAG follows "TAG-TEXT ::" pattern, where TAG-TEXT can contain any
   character but a new line.

   An item ends before the next item, the first line less or equally
   indented than its starting line, or two consecutive empty lines.
   Indentation of lines within other greater elements do not count,
   neither do inlinetasks boundaries.

   A plain list is a set of consecutive items of the same indentation.
   It can only directly contain items.

   If first item in a plain list has a counter in its bullet, the
   plain list will be an "ordered plain-list".  If it contains a tag,
   it will be a "descriptive list".  Otherwise, it will be an
   "unordered list".  List types are mutually exclusive.

   For example, consider the following excerpt of an Org document:

   #+BEGIN_EXAMPLE
   1. item 1
   2. [X] item 2
      - some tag :: item 2.1
   #+END_EXAMPLE

   Its internal structure is as follows:

   #+BEGIN_EXAMPLE
   (ordered-plain-list
    (item)
    (item
     (descriptive-plain-list
      (item))))
   #+END_EXAMPLE

** Tables
   :PROPERTIES:
   :CUSTOM_ID: Tables
   :END:

   Tables start at lines beginning with either a vertical bar or the
   "+-" string followed by plus or minus signs only, assuming they are
   not preceded with lines of the same type.  These lines can be
   indented.

   A table starting with a vertical bar has "org" type.  Otherwise it
   has "table.el" type.

   Org tables end at the first line not starting with a vertical bar.
   Table.el tables end at the first line not starting with either
   a vertical line or a plus sign.  Such lines can be indented.

   An org table can only contain table rows.  A table.el table does
   not contain anything.

   One or more "#+TBLFM: FORMULAS" lines, where "FORMULAS" can contain
   any character, can follow an org table.

* Elements
  :PROPERTIES:
  :CUSTOM_ID: Elements
  :END:

  Elements cannot contain any other element.

  Only [[#Keywords][keywords]] whose name belongs to
  ~org-element-document-properties~, [[#Blocks][verse blocks]] , [[#Paragraphs][paragraphs]] and
  [[#Table_Rows][table rows]] can contain objects.

** Babel Call
   :PROPERTIES:
   :CUSTOM_ID: Babel_Call
   :END:

   Pattern for babel calls is:

   #+BEGIN_EXAMPLE
   ,#+CALL: VALUE
   #+END_EXAMPLE

   VALUE is optional.  It can contain any character but a new line.

** Blocks
   :PROPERTIES:
   :CUSTOM_ID: Blocks
   :ID:       618477d5-cb28-4eff-a5ef-cc9b54dc8fb7
   :END:

   Like [[#Greater_Blocks][greater blocks]], pattern for blocks is:

   #+BEGIN_EXAMPLE
   ,#+BEGIN_NAME DATA
   CONTENTS
   ,#+END_NAME
   #+END_EXAMPLE

   #+NAME: block
   #+BEGIN_SRC lisp
     (defclass block (environment keywords)
       ((begin :initarg :begin)
        (name :initarg :name 
              :accessor block-name)
        (data :initarg :data
              :accessor block-data)
        (contents-start-input
         :initarg :contents-start-input
         :accessor block-contents-start-input)
        (contents :initarg :contents
                  :accessor block-contents)
        (contents-end-input
              :initarg :contents-end-input
              :accessor block-contents-end-input)
        (end :initarg :end)
        (start-input :initarg :start-input 
                     :accessor block-start-input)
        (end-input :initarg :end-input
                   :accessor block-end-input)))
   #+END_SRC

*** name 
   NAME cannot contain any whitespace character.
   
   #+NAME: block-name
   #+BEGIN_SRC lisp
     (defun .name () 
       (.string-of (.is-not 'member (cons #\Newline *whitespace*))))
   #+END_SRC
*** block content and end block

   DATA can contain any character but a new line.  It can be ommitted,
   unless the block is a "source block".  

   CONTENTS can contain any element, except : a line =#+END_NAME= on
   its own.  Also lines beginning with STARS must be quoted by
   a comma.

   #+name: block-contents
   #+BEGIN_SRC lisp
     (defun .end-block (name)
       (.let* ((prefix (.string-of (.whitespace)))
               (end (.string-equal 
                     (concatenate 
                      'string  "#+END_" name))))
         (.result (concatenate 'string prefix end))))
                      
     (defun .block ()
       (.let* ((start-input (.input))
               (pre (.some (.whitespace)))
               (begin (.string-equal "#+BEGIN_"))
               (keywords (.some (.keyword)))
               (name (.name))
               (data (.prog2 (.is 'char= #\Space)
                             (.string-of (.is-not 'char= #\Newline))
                             (.is 'char= #\Newline)))
               (contents-start-input (.input))
               (contents.input.end (.until 
                                    (.let* ((eip (.input))
                                            (end
                                             (.end-block name)))
                                      (.result (cons eip end)))
                                   :do (.line)))
               (post (.some (.is-not 'char= #\Newline)))
               (end-input (.input)))
         (.result 
          (make-instance 
          (or (block-class name) 'block)
          :start-input start-input
          :whitespace-prefix pre
          :begin begin
          :keywords keywords
          :name name
          :data data
          :contents-start-input contents-start-input
          :contents (car contents.input.end)
          :contents-end-input (cadr contents.input.end)
          :end (cddr contents.input.end)
          :whitespace-postfix post
          :end-input end-input))))
        
   #+END_SRC

*** Different Block Types

   If NAME is "COMMENT", it will be a "comment block".  If it is
   "EXAMPLE", it will be an "example block".  If it is "SRC", it will
   be a "source block".  If it is "VERSE", it will be a "verse block".

   CONTENTS can contain any character, including new lines.  Though it
   will only contain Org objects if the block is a verse block.
   Otherwise, contents will not be parsed.
   
   #+name: block-classes
   #+BEGIN_SRC lisp
     (defvar *block-classes* (list))
     
     (defun add-block (name class)
       (pushnew (cons name class)
                ,*block-classes* 
                :test #'equalp))
     
     (defun block-class (name)
       (cdr (assoc name *block-classes* 
                   :test #'string-equal)))
        
   #+END_SRC

   #+NAME: add-element-blocks
   #+BEGIN_SRC lisp :noweb tangle
     (defclass comment-block (block) ())
     (add-block "COMMENT" 'comment-block)
     
     (defclass example-block (block) ())
     (add-block "EXAMPLE" 'example-block)
     
     (defclass verse-block (block) ())
     (add-block "VERSE" 'verse-block)     
   #+END_SRC

   If NAME is a string matching the name of any export back-end
   loaded, the block will be an "export block".
   
*** Source Block 
    
    In this case, DATA must follow
    the pattern "LANGUAGE SWITCHES ARGUMENTS", where SWITCHES and
    ARGUMENTS are optional.

   #+NAME: source-block
   #+BEGIN_SRC lisp :noweb :tangle   
     (defclass source-block (block)
       ((language :initarg :language 
                  :accessor source-block-language)
        (switches :initarg :switches 
                  :accessor source-block-switches)
        (arguments :initarg :arguments 
                   :accessor source-block-arguments)))     
     
     (add-block "SRC" 'source-block) 
   #+END_SRC
**** Language
   LANGUAGE cannot contain any whitespace character
.
   #+NAME: source-block-language
   #+BEGIN_SRC lisp 
     (defun .language () 
       (.string-of (.is-not 'member (cons #\Newline *whitespace*))))
   #+END_SRC

**** TODO Switches

   SWITCHES is made of any number of "SWITCH" patterns, separated by
   blank lines.

   A SWITCH pattern is either "-l "FORMAT"", where FORMAT can contain
   any character but a double quote and a new line, "-S" or "+S",
   where S stands for a single letter.

   #+NAME: source-block-switches
   #+BEGIN_SRC lisp 
     (defun .switches () 
       ;; TODO
       (.result nil))
   #+END_SRC

**** Arguments

   ARGUMENTS can contain any character but a new line.

   #+NAME: source-block-arguments
   #+BEGIN_SRC lisp
     (defun .arguments () 
      (.optional (.string-of (.is-not 'eql #\Newline))))
   #+END_SRC

**** Initialise the source-block instance

   #+NAME: source-block-initialize
   #+BEGIN_SRC lisp     
     (defmethod initialize-instance :after ((source-block source-block)
                                            &rest initargs)
       (declare (ignore initargs))
       (.run 
          (.let* ((language (.language))
                  (_ (.optional (.is 'eql #\Space)))
                  (switches (.switches))
                  (_ (.optional (.is 'eql #\Space)))
                  (arguments (.arguments)))
            (with-accessors ((l source-block-language)
                             (s source-block-switches)
                             (a source-block-arguments)) 
                source-block
              (.result (setf l language
                             s switches
                             a arguments))))
          (block-data source-block)))
   #+END_SRC
   
**** SRC block package/file 

   #+BEGIN_SRC lisp :tangle org/source-block.lisp :noweb tangle :padline no
     (defpackage :smug/parser/org/source-block
       (:use :cl 
             :smug/parser/org/dot
             :smug/parser/org/util
             :smug/parser/org/parameters
             :smug/parser/org/syntax
             :smug/parser/org/environment)
       (:import-from :smug/parser/org/keyword
                     #:.keyword
                     #:keywords)
       (:shadowing-import-from :smug/parser/org/block 
                               #:block #:add-block #:block-data)
       (:export #:source-block
                #:source-block-language))
     (in-package :smug/parser/org/source-block)
     
     <<source-block>>
     
     <<source-block-language>>
     
     <<source-block-switches>>
     
     <<source-block-arguments>>
     
     <<source-block-initialize>>
   #+END_SRC
*** Block package/file 

   #+BEGIN_SRC lisp :tangle org/block.lisp :noweb tangle :padline no
     (defpackage :smug/parser/org/block
       (:use :cl 
             :smug/parser/org/dot
             :smug/parser/org/util
             :smug/parser/org/parameters
             :smug/parser/org/syntax
             :smug/parser/org/environment)
       (:import-from :smug/parser/org/keyword
                     #:.keyword
                     #:keywords)
       (:shadow #:block)
       (:export #:block
                #:block-contents
                #:.block
                #:add-block
                #:comment-block
                #:verse-block
                #:example-block))
     (in-package :smug/parser/org/block)
     
     <<block>>
     
     <<block-name>>
     
     <<block-contents>>
        
     <<block-classes>>
     
     <<add-element-blocks>>
   #+END_SRC
** Clock, Diary Sexp and Planning
   :PROPERTIES:
   :CUSTOM_ID: Clock,_Diary_Sexp_and_Planning
   :END:

   A clock follows the pattern:
   
   #+BEGIN_EXAMPLE
   CLOCK: TIMESTAMP DURATION
   #+END_EXAMPLE

   Both TIMESTAMP and DURATION are optional.

   TIMESTAMP is a [[#Timestamp][timestamp]] object.

   DURATION follows the pattern:

   #+BEGIN_EXAMPLE
   => HH:MM
   #+END_EXAMPLE

   HH is a number containing any number of digits.  MM is a two digit
   numbers.

   A diary sexp is a line starting at column 0 with "%%(" string.  It
   can then contain any character besides a new line.

   A planning is a line filled with more at most three INFO parts,
   where each INFO part follows the pattern:

   #+BEGIN_EXAMPLE
   KEYWORD: TIMESTAMP
   #+END_EXAMPLE

   KEYWORD is a string among ~org-deadline-string~,
   ~org-scheduled-string~ and ~org-closed-string~.  TIMESTAMP is is
   a [[#Timestamp][timestamp]] object.

   Even though a planning element can exist anywhere in a section or
   a greater element, it will only affect the headline containing the
   section if it is put on the line following that headline.

** Comments
   :PROPERTIES:
   :CUSTOM_ID: Comments
   :END:

   A "comment line" starts with a hash signe and a whitespace
   character or an end of line.

   Comments can contain any number of consecutive comment lines.

** Fixed Width Areas
   :PROPERTIES:
   :CUSTOM_ID: Fixed_Width_Areas
   :END:

   A "fixed-width line" start with a colon character and a whitespace
   or an end of line.

   Fixed width areas can contain any number of consecutive fixed-width
   lines.

** Horizontal Rules
   :PROPERTIES:
   :CUSTOM_ID: Horizontal_Rules
   :END:

   A horizontal rule is a line made of at least 5 consecutive hyphens.
   It can be indented.

** Keywords

   Keywords follow the syntax:

   #+BEGIN_EXAMPLE
   ,#+KEY: VALUE
   #+END_EXAMPLE

   KEY can contain any non-whitespace character, but it cannot be
   equal to "CALL" or any affiliated keyword.

   VALUE can contain any character excepted a new line.

   If KEY belongs to ~org-element-document-properties~, VALUE can
   contain objects.

** LaTeX Environments
   :PROPERTIES:
   :CUSTOM_ID: LaTeX_Environments
   :END:

   Pattern for LaTeX environments is:

   #+BEGIN_EXAMPLE
   \begin{NAME}
   CONTENTS
   \end{NAME}
   #+END_EXAMPLE

   NAME is constituted of alpha-numeric characters and may end with an
   asterisk.

   CONTENTS can contain anything but the "\end{NAME}" string.

** Node Properties
   :PROPERTIES:
   :CUSTOM_ID: Node_Properties
   :END:

   Patter for node properties is:

   #+BEGIN_EXAMPLE
   :PROPERTY: VALUE
   #+END_EXAMPLE

   PROPERTY can contain any non-whitespace character.  VALUE can
   contain any character but a new line.

   Node properties can only exist in a [[#Drawers_and_Property_Drawers][property drawers]].

** Paragraphs
   :PROPERTIES:
   :CUSTOM_ID: Paragraphs
   :END:

   Paragraphs are the default element, which means that any
   unrecognized context is a paragraph.

   Empty lines and other elements end paragraphs.

   Paragraphs can contain every type of object.

** Table Rows
   :PROPERTIES:
   :CUSTOM_ID: Table_Rows
   :END:

   A table rows is either constituted of a vertical bar and any number
   of [[#Table_Cells][table cells]] or a vertical bar followed by a hyphen.

   In the first case the table row has the "standard" type.  In the
   second case, it has the "rule" type.

   Table rows can only exist in [[#Tables][tables]].

* Objects
  :PROPERTIES:
  :CUSTOM_ID: Objects
  :END:

  Objects can only be found in the following locations:

  - [[#Affiliated_keywords][affiliated keywords]] defined in ~org-element-parsed-keywords~,
  - [[#Keywords][document properties]],
  - [[#Headlines_and_Sections][headline]] titles,
  - [[#Inlinetasks][inlinetask]] titles,
  - [[#Plain_Lists_and_Items][item]] tags,
  - [[#Paragraphs][paragraphs]],
  - [[#Table_Cells][table cells]],
  - [[#Table_Rows][table rows]], which can only contain table cell
    objects,
  - [[#Blocks][verse blocks]].
    
  Most objects cannot contain objects.  Those which can will be
  specified.

** Entities and LaTeX Fragments
   :PROPERTIES:
   :CUSTOM_ID: Entities_and_LaTeX_Fragments
   :END:

   An entity follows the pattern:

   #+BEGIN_EXAMPLE
   \NAME POST
   #+END_EXAMPLE

   where NAME has a valid association in either ~org-entities~ or
   ~org-entities-user~.

   POST is the end of line, "{}" string, or a non-alphabetical
   character.  It isn't separated from NAME by a whitespace character.

   A LaTeX fragment can follow multiple patterns:

   #+BEGIN_EXAMPLE
   \NAME POST
   \(CONTENTS\)
   \[CONTENTS\]
   $$CONTENTS$$
   PRE$CHAR$POST
   PRE$BORDER1 BODY BORDER2$
   #+END_EXAMPLE

   NAME contains alphabetical characters only and must not have an
   association in either ~org-entities~ or ~org-entities-user~.

   POST is the same as for entities.

   CONTENTS can contain any character but cannot contain "\)" in the
   second template or "\]" in the third one.

   PRE is either the beginning of line or a character different from
   ~$~.

   CHAR is a non-whitespace character different from ~.~, ~,~, ~?~,
   ~;~, ~'~ or a double quote.

   POST is any of ~-~, ~.~, ~,~, ~?~, ~;~, ~:~, ~'~, a double quote,
   a whitespace character and the end of line.

   BORDER1 is a non-whitespace character different from ~.~, ~;~, ~.~
   and ~$~.

   BODY can contain any character excepted ~$~, and may not span over
   more than 3 lines.

   BORDER2 is any non-whitespace character different from ~,~, ~.~ and
   ~$~.

   #+ATTR_ASCII: :width 5
   -----

   #+BEGIN_QUOTE
   It would introduce incompatibilities with previous Org versions,
   but support for ~$...$~ (and for symmetry, ~$$...$$~) constructs
   ought to be removed.

   They are slow to parse, fragile, redundant and imply false
   positives.  --- ngz
   #+END_QUOTE

** Export Snippets
   :PROPERTIES:
   :CUSTOM_ID: Export_Snippets
   :END:

   Patter for export snippets is:

   #+BEGIN_EXAMPLE
   @@NAME:VALUE@@
   #+END_EXAMPLE

   NAME can contain any alpha-numeric character and hyphens.

   VALUE can contain anything but "@@" string.

** Footnote References
   :PROPERTIES:
   :CUSTOM_ID: Footnote_References
   :END:

   There are four patterns for footnote references:

   #+BEGIN_EXAMPLE
   [MARK]
   [fn:LABEL]
   [fn:LABEL:DEFINITION]
   [fn::DEFINITION]
   #+END_EXAMPLE

   MARK is a number.

   LABEL can contain any word constituent character, hyphens and
   underscores.

   DEFINITION can contain any character.  Though opening and closing
   square brackets must be balanced in it.  It can contain any object
   encountered in a paragraph, even other footnote references.

   If the reference follows the third pattern, it is called an "inline
   footnote".  If it follows the fourth one, i.e. if LABEL is omitted,
   it is an "anonymous footnote".

** Inline Babel Calls and Source Blocks
   :PROPERTIES:
   :CUSTOM_ID: Inline_Babel_Calls_and_Source_Blocks
   :END:

   Inline Babel calls follow any of the following patterns:

   #+BEGIN_EXAMPLE
   call_NAME(ARGUMENTS)
   call_NAME[HEADER](ARGUMENTS)[HEADER]
   #+END_EXAMPLE

   NAME can contain any character besides ~(~, ~)~ and "\n".

   HEADER can contain any character besides ~]~ and "\n".

   ARGUMENTS can contain any character besides ~)~ and "\n".

   Inline source blocks follow any of the following patterns:
   
   #+BEGIN_EXAMPLE
   src_LANG{BODY}
   src_LANG[OPTIONS]{BODY}
   #+END_EXAMPLE

   LANG can contain any non-whitespace character.

   OPTIONS and BODY can contain any character but "\n".

** Line Breaks
   :PROPERTIES:
   :CUSTOM_ID: Line_Breaks
   :END:

   A line break consists in "\\SPACE" pattern at the end of an
   otherwise non-empty line.

   SPACE can contain any number of tabs and spaces, including 0.

** Links
   :PROPERTIES:
   :CUSTOM_ID: Links
   :END:

   There are 4 major types of links:

   #+BEGIN_EXAMPLE
   RADIO                     ("radio" link)
   <PROTOCOL:PATH>           ("angle" link)
   PRE PROTOCOL:PATH2 POST   ("plain" link)
   [[PATH3]DESCRIPTION]      ("regular" link)
   #+END_EXAMPLE

   RADIO is a string matched by some [[#Targets_and_Radio_Targets][radio target]].  It can contain
   [[#Entities_and_LaTeX_Fragments][entities]], [[#Entities_and_LaTeX_Fragments][latex fragments]], [[#Subscript_and_Superscript][subscript]] and [[#Subscript_and_Superscript][superscript]] only.

   PROTOCOL is a string among ~org-link-types~.

   PATH can contain any character but ~]~, ~<~, ~>~ and ~\n~.

   PRE and POST are non word constituent.  They can be, respectively,
   the beginning or the end of a line.

   PATH2 can contain any non-whitespace character excepted ~(~, ~)~,
   ~<~ and ~>~.  It must end with a word-constituent character, or any
   non-whitespace non-punctuation character followed by ~/~.

   DESCRIPTION must be enclosed within square brackets.  It can
   contain any character but square brackets.  Object-wise, it can
   contain any object found in a paragraph excepted a [[#Footnote_References][footnote
   reference]], a [[#Targets_and_Radio_Targets][radio target]] and a [[#Line_Breaks][line break]].  It cannot contain
   another link either, unless it is a plain link.

   DESCRIPTION is optional.

   PATH3 is built according to the following patterns:

   #+BEGIN_EXAMPLE
   FILENAME           ("file" type)
   PROTOCOL:PATH4     ("PROTOCOL" type)
   id:ID              ("id" type)
   #CUSTOM-ID         ("custom-id" type)
   (CODEREF)          ("coderef" type)
   FUZZY              ("fuzzy" type)
   #+END_EXAMPLE

   FILENAME is a file name, either absolute or relative.

   PATH4 can contain any character besides square brackets.

   ID is constituted of hexadecimal numbers separated with hyphens.

   PATH4, CUSTOM-ID, CODEREF and FUZZY can contain any character
   besides square brackets.

   #+ATTR_ASCII: :width 5
   -----

   #+BEGIN_QUOTE
   I suggest to remove angle links.  If one needs spaces in PATH, she
   can use standard link syntax instead.

   I also suggest to remove ~org-link-types~ dependency in PROTOCOL
   and match ~[a-zA-Z]~ instead, for portability.  --- ngz
   #+END_QUOTE

** Macros
   :PROPERTIES:
   :CUSTOM_ID: Macros
   :END:

   Macros follow the pattern:

   #+BEGIN_EXAMPLE
   {{{NAME(ARGUMENTS)}}}
   #+END_EXAMPLE

   NAME must start with a letter and can be followed by any number of
   alpha-numeric characters, hyphens and underscores.

   ARGUMENTS can contain anything but "}}}" string.  Values within
   ARGUMENTS are separated by commas.  Non-separating commas have to
   be escaped with a backslash character.

** Targets and Radio Targets
   :PROPERTIES:
   :CUSTOM_ID: Targets_and_Radio_Targets
   :END:

   Radio targets follow the pattern:

   #+BEGIN_EXAMPLE
   <<<CONTENTS>>>
   #+END_EXAMPLE

   CONTENTS can be any character besides ~<~, ~>~ and "\n".  As far as
   objects go, it can contain [[#Entities_and_LaTeX_Fragments][entities]], [[#Entities_and_LaTeX_Fragments][latex fragments]], [[#Subscript_and_Superscript][subscript]] and
   [[#Subscript_and_Superscript][superscript]] only.

   Targets follow the pattern:

   #+BEGIN_EXAMPLE
   <<TARGET>>
   #+END_EXAMPLE

   TARGET can contain any character besides ~<~, ~>~ and "\n".  It
   cannot contain any object.

** Statistics Cookies
   :PROPERTIES:
   :CUSTOM_ID: Statistics_Cookies
   :END:

   Statistics cookies follow either pattern:

   #+BEGIN_EXAMPLE
   [PERCENT%]
   [NUM1/NUM2]
   #+END_EXAMPLE

   PERCENT, NUM1 and NUM2 are numbers or the empty string.

** Subscript and Superscript
   :PROPERTIES:
   :CUSTOM_ID: Subscript_and_Superscript
   :END:

   Pattern for subscript is:

   #+BEGIN_EXAMPLE
   CHAR_SCRIPT
   #+END_EXAMPLE

   Pattern for superscript is:

   #+BEGIN_EXAMPLE
   CHAR^SCRIPT
   #+END_EXAMPLE

   CHAR is any non-whitespace character.

   SCRIPT can be ~*~, a string made of word-constituent characters
   maybe preceded by a plus or a minus sign, an expression enclosed in
   parenthesis (resp. curly brackets) containing balanced parenthesis
   (resp. curly brackets).

** Table Cells
   :PROPERTIES:
   :CUSTOM_ID: Table_Cells
   :END:

   Table cells follow the pattern:

   #+BEGIN_EXAMPLE
   CONTENTS|
   #+END_EXAMPLE

   CONTENTS can contain any character excepted a vertical bar.

** Timestamps
   :PROPERTIES:
   :CUSTOM_ID: Timestamp
   :END:

   There are seven possible patterns for timestamps:
   
   #+BEGIN_EXAMPLE
   <%%(SEXP)>                                     (diary)
   <DATE TIME REPEATER>                         (active)
   [DATE TIME REPEATER]                         (inactive)
   <DATE TIME REPEATER>--<DATE TIME REPEATER>   (active range)
   <DATE TIME-TIME REPEATER>                    (active range)
   [DATE TIME REPEATER]--[DATE TIME REPEATER]   (inactive range)
   [DATE TIME-TIME REPEATER]                    (inactive range)
   #+END_EXAMPLE

   SEXP can contain any character excepted ~>~ and ~\n~.

   DATE follows the pattern:

   #+BEGIN_EXAMPLE
   YYYY-MM-DD DAYNAME
   #+END_EXAMPLE

   Y, M and D are digits.  DAYNAME can contain any non
   whitespace-character besides ~+~, ~-~, ~]~, ~>~, a digit or ~\n~.

   TIME follows the pattern =H:MM~.  H can be one or two digit long
   and can start with 0.

   REPEATER follows the patter:

   #+BEGIN_EXAMPLE
   MARK VALUE UNIT
   #+END_EXAMPLE

   MARK is ~+~ (cumulate type), ~++~ (catch-up type) or ~.+~ (restart
   type).

   VALUE is a number.

   UNIT is a character among ~h~ (hour), ~d~ (day), ~w~ (week), ~m~
   (month), ~y~ (year).

   MARK, VALUE and UNIT are not separated by whitespace characters.

** Text Markup
   :PROPERTIES:
   :CUSTOM_ID: Emphasis_Markers
   :END:

   Text markup follows the pattern:

   #+BEGIN_EXAMPLE
   PRE MARKER CONTENTS MARKER POST
   #+END_EXAMPLE

   PRE is a whitespace character, ~(~, ~{~ ~'~ or a double quote.  It
   can also be a beginning of line.

   MARKER is a character among ~*~ (bold), ~=~ (verbatim), ~/~
   (italic), ~+~ (strike-through), ~_~ (underline), ~~~ (code).

   CONTENTS is a string following the pattern:

   #+BEGIN_EXAMPLE
   BORDER BODY BORDER
   #+END_EXAMPLE

   BORDER can be any non-whitespace character excepted ~,~, ~'~ or
   a double quote.

   BODY can contain contain any character but may not span over more
   than 3 lines.

   BORDER and BODY are not separated by whitespaces.

   CONTENTS can contain any object encountered in a paragraph when
   markup is "bold", "italic", "strike-through" or "underline".

   POST is a whitespace character, ~-~, ~.~, ~,~, ~:~, ~!~, ~?~, ~'~,
   ~)~, ~}~ or a double quote.  It can also be an end of line.

   PRE, MARKER, CONTENTS, MARKER and POST are not separated by
   whitespace characters.

   #+ATTR_ASCII: :width 5
   -----
   
   #+BEGIN_QUOTE
   All of this is wrong if ~org-emphasis-regexp-components~ or
   ~org-emphasis-alist~ are modified.

   This should really be simplified and made persistent (i.e. no
   defcustom allowed).  Otherwise, portability and parsing are
   jokes.

   Also, CONTENTS should be anything within code and verbatim
   emphasis, by definition.  --- ngz
   #+END_QUOTE

* Footnotes

[fn:1] In particular, the parser requires stars at column 0 to be
quoted by a comma when they do not define a headline.

[fn:2] It also means that only headlines and sections can be
recognized just by looking at the beginning of the line.

As a consequence, using ~org-element-at-point~ or
~org-element-context~ will move up to the parent headline, and parse
top-down from there until context around is found.


# Local Variables:
# sentence-end-double-space: t
# End:
* Appendix
  :PROPERTIES:
  :ID:       d81fd9ba-e47a-461a-8a22-a3b0eb01f58e
  :END:


*** greater element
#+HEADER: :padline no :noweb tangle
#+BEGIN_SRC lisp :tangle org/greater-element.lisp
  (defpackage smug/parser/org/greater-element 
    (:use :cl :smug/parser/org/dot
          :smug/parser/org/util
          :smug/parser/org/parameters))
  
  <<greater-element>>
#+END_SRC
*** blocks
#+HEADER: :padline no :noweb tangle
#+BEGIN_SRC lisp :tangle org/.lisp

#+END_SRC

*** org.lisp
#+begin_src lisp :tangle org.lisp :noweb yes :padline no
  (defpackage :smug/parser/org
    (:use :cl :smug/pure/dot)
    (:export #:.affiliated-keyword
             #:.element-block
             #:.line))
  (in-package :smug/parser/org)
  
  ;; (defvar *org-parameters* (list))
  
  ;; (defun make-org-parameter (name value &optional documentation)
  ;;   (setf *org-parameters* (acons (cons name documentation) value *org-parameters*)))
  
  ;; (defun org-parameter (name)
  ;;   (cdr (assoc name *org-parameters* :key #'car)))
  
  ;; (defun .optional (parser)
  ;;   (.maybe parser (.result nil)))
  
  ;; (defun .separator ()
  ;;   (.or (.is #'char= #\Space) 
  ;;        (.progn (.not (.item))
  ;;                (.result :end))
  ;;        (.progn (.not (.is-not #'char= #\Newline))
  ;;                (.result #\Newline))))
  
  ;; (defun .make (function &rest plist)
  ;;   (if (and function (not plist))
  ;;       (.result (funcall function))
  ;;       (destructuring-bind (name value . rest) plist
  ;;         (.let* ((value value)
  ;;                 (rest (if rest 
  ;;                           (apply #'.make nil rest)
  ;;                           (.result nil))))
  ;;           (.result (if function 
  ;;                        (apply function name value rest)
  ;;                        (list* name value rest)))))))
  
  ;; (defun .make-instance (name &rest initargs)
  ;;  (apply #'.make (lambda (&rest initargs)
  ;;          (apply #'make-instance name initargs))
  ;;         initargs))
  
  ;; <<syntax>>
    
  ;; <<.whitespace>>  
  
  ;; <<.line>>
  
  ;; <<.until>>
  
  ;; <<affiliated-keyword>>
  
  ;; <<greater-element>>
  
  ;; <<greater-block-class>>
   
  ;; <<greater-block-classes>>
  
  ;; <<.greater-block>>
  
  ;; <<special-block>>
  
  ;; <<element-block>>
  
  ;; <<element-block-names>>
  
  ;; <<source-block>>
  
  ;; <<source-block-initialize>>
  
  ;; (defparameter |*TEST-STRING:headline*|
  ;;   (subseq "
  ;; <<TEST-STRING:headline>>"
  ;;          1))
#+end_src
